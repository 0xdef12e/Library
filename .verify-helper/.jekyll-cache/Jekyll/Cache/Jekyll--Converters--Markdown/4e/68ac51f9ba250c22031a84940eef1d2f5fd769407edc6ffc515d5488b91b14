I"°_<!-- mathjax config similar to math.stackexchange -->
<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    TeX: { equationNumbers: { autoNumber: "AMS" }},
    tex2jax: {
      inlineMath: [ ['$','$'] ],
      processEscapes: true
    },
    "HTML-CSS": { matchFontHeight: false },
    displayAlign: "left",
    displayIndent: "2em"
  });
</script>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/jquery-balloon-js@1.1.2/jquery.balloon.min.js" integrity="sha256-ZEYs9VrgAeNuPvs15E39OsyOJaIkXEEt10fzxJ20+2I=" crossorigin="anonymous"></script>

<script type="text/javascript" src="../../assets/js/copy-button.js"></script>

<link rel="stylesheet" href="../../assets/css/copy-button.css" />

<h1 id="warning-data-structureheavylightdecompositioncpp">:warning: Data Structure/HeavyLightDecomposition.cpp</h1>

<p><a href="../../index.html">Back to top page</a></p>

<ul>
  <li>category: <a href="../../index.html#e226710d16f039ef02ab4b3ec3a63ed1">Data Structure</a></li>
  <li><a href="/blob/master/Data Structure/HeavyLightDecomposition.cpp">View this file on GitHub</a>
    <ul>
      <li>Last commit date: 2020-09-09 19:56:06+09:00</li>
    </ul>
  </li>
</ul>

<h2 id="depends-on">Depends on</h2>

<ul>
  <li>:warning: <a href="../template/template.cpp.html">template/template.cpp</a></li>
</ul>

<h2 id="code">Code</h2>

<p><a id="unbundled"></a></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma once
#include "../template/template.cpp"
</span>
<span class="k">struct</span> <span class="nc">HLD</span><span class="p">{</span>
	<span class="k">using</span> <span class="n">V</span><span class="o">=</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="n">P</span><span class="o">&gt;&gt;</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">heavy_set</span><span class="p">{</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ele</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">depth</span><span class="p">,</span><span class="n">par</span><span class="p">,</span><span class="n">cost1</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">cost2</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
		<span class="n">heavy_set</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">,</span><span class="kt">int</span> <span class="n">d</span><span class="p">,</span><span class="kt">int</span> <span class="n">par</span><span class="p">)</span>
		<span class="o">:</span><span class="n">ele</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">v</span><span class="p">),</span><span class="n">depth</span><span class="p">(</span><span class="n">d</span><span class="p">),</span><span class="n">par</span><span class="p">(</span><span class="n">par</span><span class="p">){}</span>
	<span class="p">};</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="n">G</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">heavy_set</span><span class="o">&gt;</span><span class="n">S</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">subsize</span><span class="p">,</span><span class="n">stidx</span><span class="p">,</span><span class="n">eleidx</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">subtree</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">,</span><span class="kt">int</span> <span class="n">p</span><span class="p">){</span>
		<span class="kt">int</span> <span class="o">&amp;</span><span class="n">sz</span><span class="o">=</span><span class="n">subsize</span><span class="p">[</span><span class="n">v</span><span class="p">];</span>
		<span class="k">if</span><span class="p">(</span><span class="n">sz</span><span class="p">)</span><span class="k">return</span> <span class="n">sz</span><span class="p">;</span>
		<span class="n">sz</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span><span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">])</span><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">p</span><span class="p">)</span><span class="n">sz</span><span class="o">+=</span><span class="n">subtree</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">);</span>
		<span class="k">return</span> <span class="n">sz</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="n">make_path</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">,</span><span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">id</span><span class="p">){</span>
		<span class="n">stidx</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="n">id</span><span class="p">;</span>
		<span class="n">eleidx</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="n">S</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">ele</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">mxidx</span><span class="p">,</span><span class="n">mx</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span><span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">])</span><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">p</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">mx</span><span class="o">&lt;</span><span class="n">subtree</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">)){</span>
				<span class="n">mx</span><span class="o">=</span><span class="n">subtree</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">);</span><span class="n">mxidx</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span><span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">])</span><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">p</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">mxidx</span><span class="o">==</span><span class="n">i</span><span class="p">){</span>
				<span class="n">S</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">ele</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
				<span class="n">make_path</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">id</span><span class="p">);</span>
			<span class="p">}</span><span class="k">else</span> <span class="p">{</span>
				<span class="n">S</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">S</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">v</span><span class="p">);</span>
				<span class="n">make_path</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">S</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">st</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">){</span><span class="k">return</span> <span class="n">stidx</span><span class="p">[</span><span class="n">v</span><span class="p">];}</span>
	<span class="kt">int</span> <span class="n">el</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">){</span><span class="k">return</span> <span class="n">eleidx</span><span class="p">[</span><span class="n">v</span><span class="p">];}</span>
	<span class="n">HLD</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span><span class="n">G</span><span class="p">)</span><span class="o">:</span><span class="n">G</span><span class="p">(</span><span class="n">G</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">N</span><span class="o">=</span><span class="n">G</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
		<span class="n">subsize</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
		<span class="n">eleidx</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
		<span class="n">stidx</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
		<span class="n">S</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
		<span class="n">make_path</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">};</span>

</code></pre></div></div>

<p><a id="bundled"></a></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#line 2 "template/template.cpp"
#include&lt;bits/stdc++.h&gt;
#pragma GCC optimization ("Ofast")
#pragma GCC optimization ("unroll-loops")
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#define int long long
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define REP(i,n) for(int i=1;i&lt;n;i++)
#define rev(i,n) for(int i=n-1;i&gt;=0;i--)
#define all(v) v.begin(),v.end()
#define P pair&lt;int,int&gt;
#define len(s) (int)s.size()
</span> 
<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">&gt;</span> <span class="kr">inline</span> <span class="kt">bool</span> <span class="nf">chmin</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">b</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">){</span><span class="n">a</span><span class="o">=</span><span class="n">b</span><span class="p">;</span><span class="k">return</span> <span class="nb">true</span><span class="p">;}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">&gt;</span> <span class="kr">inline</span> <span class="kt">bool</span> <span class="nf">chmax</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">b</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&lt;</span><span class="n">b</span><span class="p">){</span><span class="n">a</span><span class="o">=</span><span class="n">b</span><span class="p">;</span><span class="k">return</span> <span class="nb">true</span><span class="p">;}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">constexpr</span> <span class="kt">int</span> <span class="n">mod</span> <span class="o">=</span> <span class="mf">1e9</span><span class="o">+</span><span class="mi">7</span><span class="p">;</span>
<span class="k">constexpr</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">inf</span> <span class="o">=</span> <span class="mf">3e18</span><span class="p">;</span>
<span class="cp">#line 3 "Data Structure/HeavyLightDecomposition.cpp"
</span>
<span class="k">struct</span> <span class="nc">HLD</span><span class="p">{</span>
	<span class="k">using</span> <span class="n">V</span><span class="o">=</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="n">P</span><span class="o">&gt;&gt;</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">heavy_set</span><span class="p">{</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ele</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">depth</span><span class="p">,</span><span class="n">par</span><span class="p">,</span><span class="n">cost1</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">cost2</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
		<span class="n">heavy_set</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">,</span><span class="kt">int</span> <span class="n">d</span><span class="p">,</span><span class="kt">int</span> <span class="n">par</span><span class="p">)</span>
		<span class="o">:</span><span class="n">ele</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">v</span><span class="p">),</span><span class="n">depth</span><span class="p">(</span><span class="n">d</span><span class="p">),</span><span class="n">par</span><span class="p">(</span><span class="n">par</span><span class="p">){}</span>
	<span class="p">};</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="n">G</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">heavy_set</span><span class="o">&gt;</span><span class="n">S</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">subsize</span><span class="p">,</span><span class="n">stidx</span><span class="p">,</span><span class="n">eleidx</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">subtree</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">,</span><span class="kt">int</span> <span class="n">p</span><span class="p">){</span>
		<span class="kt">int</span> <span class="o">&amp;</span><span class="n">sz</span><span class="o">=</span><span class="n">subsize</span><span class="p">[</span><span class="n">v</span><span class="p">];</span>
		<span class="k">if</span><span class="p">(</span><span class="n">sz</span><span class="p">)</span><span class="k">return</span> <span class="n">sz</span><span class="p">;</span>
		<span class="n">sz</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span><span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">])</span><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">p</span><span class="p">)</span><span class="n">sz</span><span class="o">+=</span><span class="n">subtree</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">);</span>
		<span class="k">return</span> <span class="n">sz</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="n">make_path</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">,</span><span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">id</span><span class="p">){</span>
		<span class="n">stidx</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="n">id</span><span class="p">;</span>
		<span class="n">eleidx</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="n">S</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">ele</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">mxidx</span><span class="p">,</span><span class="n">mx</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span><span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">])</span><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">p</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">mx</span><span class="o">&lt;</span><span class="n">subtree</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">)){</span>
				<span class="n">mx</span><span class="o">=</span><span class="n">subtree</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">);</span><span class="n">mxidx</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span><span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">])</span><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">p</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">mxidx</span><span class="o">==</span><span class="n">i</span><span class="p">){</span>
				<span class="n">S</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">ele</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
				<span class="n">make_path</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">id</span><span class="p">);</span>
			<span class="p">}</span><span class="k">else</span> <span class="p">{</span>
				<span class="n">S</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">S</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">v</span><span class="p">);</span>
				<span class="n">make_path</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">S</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">st</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">){</span><span class="k">return</span> <span class="n">stidx</span><span class="p">[</span><span class="n">v</span><span class="p">];}</span>
	<span class="kt">int</span> <span class="n">el</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">){</span><span class="k">return</span> <span class="n">eleidx</span><span class="p">[</span><span class="n">v</span><span class="p">];}</span>
	<span class="n">HLD</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span><span class="n">G</span><span class="p">)</span><span class="o">:</span><span class="n">G</span><span class="p">(</span><span class="n">G</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">N</span><span class="o">=</span><span class="n">G</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
		<span class="n">subsize</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
		<span class="n">eleidx</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
		<span class="n">stidx</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
		<span class="n">S</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
		<span class="n">make_path</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">};</span>

</code></pre></div></div>

<p><a href="../../index.html">Back to top page</a></p>

:ET